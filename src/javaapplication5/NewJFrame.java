/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication5;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Scanner;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

class valeursChangees
{
    public String valeurAncienne;
    public String valeurNouvelle;

    public valeursChangees valeursChangees(String s1, String s2)
    {
         this.valeurAncienne = s1;
         this.valeurNouvelle = s2;
		return null;
        
    }
}
class Changement
{
	public String Type ;
	public ArrayList<String> changementsSurType;
	public Changement Changement1(String s,ArrayList l)
	{
		this.Type=s;
		this.changementsSurType=l;
		return null;
	}
}
class Variables
{
	public String Type ;
	public ArrayList<String> listeDesVariables;
	public ArrayList<String> listeDesChangements;
	public Changement Changement(String s,ArrayList l,ArrayList l1)
	{
		this.Type=s;
		this.listeDesVariables=l;
		this.listeDesChangements=l1;
		return null;
	}
}
/**
 *
 * @author ASUS X556U
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jtf_path = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jtf_path1 = new javax.swing.JTextField();
        Old_import = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        New_import = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jtf_path2 = new javax.swing.JTextField();
        jtf_path3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        alertArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Outil de modification des déclarations et des méthodes - menu principal ");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jtf_path.setText("Path to file of declarations setting ");

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jtf_path1.setText("Path to file of methods seeting ");

        Old_import.setText("Path to file that contains old import");

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        New_import.setText("Path to file that contains new import");

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jtf_path2.setText("Path to source file or folder");
        jtf_path2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_path2ActionPerformed(evt);
            }
        });

        jtf_path3.setText("Destination folder");
        jtf_path3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_path3ActionPerformed(evt);
            }
        });

        jButton5.setText("jButton5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("jButton6");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Edit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        alertArea.setColumns(20);
        alertArea.setRows(5);
        alertArea.setText("Please choose settings , source and destination file ...");
        jScrollPane1.setViewportView(alertArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtf_path1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtf_path, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(New_import, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Old_import, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jtf_path2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_path3, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(Old_import, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(jtf_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jtf_path1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(New_import, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jtf_path2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jtf_path3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
 
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            jtf_path.setText(file.getPath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
 
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            jtf_path1.setText(file.getPath());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
 
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            jtf_path2.setText(file.getPath());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
 
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            jtf_path3.setText(file.getPath());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if((((jtf_path2.getText().endsWith(".txt"))||(jtf_path2.getText().endsWith(".java"))||(jtf_path2.getText().endsWith(".xls")))||((new File(jtf_path2.getText()).isFile())&&(!jtf_path2.getText().endsWith(".jar"))))&&(new File(jtf_path3.getText()).isDirectory()))
        {
               ArrayList<valeursChangees> liste=new ArrayList<valeursChangees>();
                                               
            
           /* for (int i = 0; i < jTextArea1.getLineCount(); i++) {
                try {
                    int lineStartOffset = jTextArea1.getLineStartOffset(i);
                    String line = jTextArea1.getText(lineStartOffset,
                            jTextArea1.getLineEndOffset(i) - lineStartOffset);
                    System.out.print(line);
            String S=line;
            valeursChangees v1=new valeursChangees();
            v1.valeurAncienne=S.substring(0,S.indexOf('-'));
            v1.valeurNouvelle=S.substring(S.indexOf('-')+1,S.length());
            liste.add(v1);
                } catch (BadLocationException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            }   */
           
            Scanner scanner8 = null;
        try {
            scanner8 = new Scanner(new File(jtf_path.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Scanner scanner4 = null;
        try {
            scanner4 = new Scanner(new File(jtf_path1.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         Scanner scanner5 = null;
        try {
            scanner5 = new Scanner(new File(New_import.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Scanner scanner10 = null;
        try {
            scanner10 = new Scanner(new File(Old_import.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            while(scanner8.hasNextLine())
            {  String S=scanner8.nextLine();
            if(!S.trim().contains("-")){if (S.trim().length()!=0) {
               
                alertArea.setText("you have not put a separator - in this line of the configuration :"+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
            valeursChangees v1=new valeursChangees();
            v1.valeurAncienne=S.substring(0,S.indexOf('-'));
            v1.valeurNouvelle=S.substring(S.indexOf('-')+1,S.length());
            liste.add(v1);
            }
           /* for(int y=0;y<liste.size();y++)
            {
                System.out.println(liste.get(y).valeurAncienne+"\n");
                System.out.println(liste.get(y).valeurNouvelle+"\n");
            }   */
            // Field[] fields = test1.class.getClass().getDeclaredFields();
            // System.out.println(fields);
            
            // Nous déclarons nos objets en dehors du bloc try/catch
            FileInputStream fis = null;
            FileOutputStream fos = null;
            FileWriter fw = null;
        try {
            fw = new FileWriter (jtf_path3.getText()+"\\"+jtf_path2.getText().substring(jtf_path2.getText().lastIndexOf("\\"),jtf_path2.getText().length()));
            
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
            
            ArrayList<String> nouveauImport=new ArrayList<String>();
            ArrayList<String> ancienImport=new ArrayList<String>();
            ArrayList<Changement> listeChangements=new ArrayList<Changement>();
            Changement c1=new Changement();
            c1.Type="String";
            ArrayList<String> l1=new ArrayList<String>();
            
            
            //ajout de changements (String)
            
            
            l1.add(".toString()");
            //
            c1.changementsSurType=l1;
            listeChangements.add(c1);
            //
            Changement c2=new Changement();
            c2.Type="Double";
            ArrayList<String> l2=new ArrayList<String>();
            
            
            //ajout de changements (Double)
            
            
            l2.add(".doubleValue()");
            //
            c2.changementsSurType=l2;
            listeChangements.add(c2);
            //
            Changement c3=new Changement();
            c3.Type="String";
            ArrayList<String> l3=new ArrayList<String>();
            
            
            //ajout de changements (Quantity)
            
            
            l3.add(".getParent()");
            //
            c3.changementsSurType=l3;
            listeChangements.add(c3);
            //
            
            
            
            
            
            /*
            liste.add(v1);
            liste.add(v2);
            liste.add(v3);
            liste.add(v4);
            liste.add(v5);
            liste.add(v6);
            liste.add(v7);
            liste.add(v8);
            liste.add(v9);
            liste.add(v10);
            liste.add(v11);
            liste.add(v12);
            liste.add(v13);
            */
            
            
            
            
            boolean t=true;
            
            
            String S="" ;
            ArrayList<Variables> toutesLesVariables=new ArrayList<Variables>();
            
            ArrayList<String> anciennesValeurs=new ArrayList<String>();
            ArrayList<String> NouveauImport=new ArrayList<String>();
        try {
            Scanner scanner = new Scanner(new File(jtf_path2.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
          
       
           
           
            while (scanner5.hasNextLine())
            {
                S =(String) scanner5.nextLine();
                nouveauImport.add(S);
            }
            while (scanner10.hasNextLine())
            {
                S =(String) scanner10.nextLine();
                ancienImport.add(S);
            }
            
 /*
  for(int aa=0;aa<nouveauImport.size();aa++)
   {
          try {
              fw.write(nouveauImport.get(aa)+"\r\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
   } 
            */
       
            
            
            /*  while (scanner2.hasNextLine()) {
            S =(String) scanner2.nextLine();
            anciennesValeurs.add(S);
            }  */
            for(int u=0;u<liste.size();u++)
            {
                anciennesValeurs.add(liste.get(u).valeurAncienne.trim());
                
            }
            for(int y=0;y<anciennesValeurs.size();y++)
            {
             //   System.out.println(anciennesValeurs.get(y));
                System.out.println(liste.get(y).valeurNouvelle);
            }
            for(int j=0;j<anciennesValeurs.size();j++)
            {
                Variables a=new Variables();
                ArrayList<String> declarations =new ArrayList<String>();
                String h1=anciennesValeurs.get(j);
                a.Type=h1;
                Scanner scanner1 = null;
              try {
                  scanner1 = new Scanner(new File(jtf_path2.getText()));
              } catch (FileNotFoundException ex) {
                  Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
              }
                
                while (scanner1.hasNextLine()) {
                    S =(String) scanner1.nextLine();
                    String sonTexte=S;
                   String tmp;
                    String z="";
                   // System.out.println(S);
                    
                    
                    
                    for (int k1=0;k1<(sonTexte.length());k1++)
                    { 
                        for(int i=0;i<sonTexte.length();i++)
                        {
                            try
                            { tmp = sonTexte.substring(k1,k1+i);/*fw1.write(tmp+"\r\n");*/ }
                            catch(Exception e)
                            { break; }
                            if ( (tmp.matches(h1+" "+"[\\w]*"+" ")) )
                            { String z1=tmp.substring(h1.length()+1);
                            System.out.println(z1);
                            declarations.add(z1);
                            }
                            if ( tmp.matches(h1+" "+"[\\w]*"+"[,;()]") )
                            {
                                String z2=tmp.substring(h1.length()+1, tmp.length()-1);
                                
                                declarations.add(z2);
                            }
                            
                        }
                    }
                    
                    
                    a.listeDesVariables=declarations;
                 //  System.out.println(a.listeDesVariables.get(0));
                }
                
         toutesLesVariables.add(a);
                
                
            }
            for(int pp=0;pp<toutesLesVariables.size();pp++)
            {
                for(int ppp=0;ppp<toutesLesVariables.get(pp).listeDesVariables.size();ppp++)
                {
                    System.out.println(toutesLesVariables.get(pp).listeDesVariables.get(ppp));
                }
            }
            
            
            int o=-1;
            
            char t1='|';
            int r=0;
            
            ArrayList<String> f1 =new ArrayList<String>();
            
            int k2=-1;
            
            ArrayList<Variables> toutesLesVariablesAux=new ArrayList<Variables>();
  while(scanner4.hasNextLine())
  {   
	
	  Variables variablesAux=new Variables();

	  S=(String) scanner4.nextLine();

	  
	  ArrayList<String> listeDesChangementsAux =new ArrayList<String>();
	  for(int i=0;i<S.length();i++)
	  { 
		  
		 
		  
		 // int y=0;
		for(int j=i;j<S.length();j++)
		{   
			if(S.charAt(j)=='|'){String s="";s=S.substring(i,j);i=j+1;listeDesChangementsAux.add(s);}
			
		}
		if(!S.trim().contains("|")){if (S.trim().length()!=0) {
               
                alertArea.setText("you have not put a separator | in this line of the configuration :"+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
                if(!S.trim().endsWith("|")){if (S.trim().length()!=0) {
               
                alertArea.setText("Every line of configuration file should ends with | "+"    "+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
		 
	//	toutesLesVariables.get(k2).listeDesChangements.add(s);
	  }
	 // System.out.println(listeDesChangementsAux.get(0));
	  variablesAux.listeDesChangements=listeDesChangementsAux;
	// 
	  k2=k2+1;
	  variablesAux.Type=toutesLesVariables.get(k2).Type;
	  variablesAux.listeDesVariables=toutesLesVariables.get(k2).listeDesVariables;

	 variablesAux.listeDesChangements=listeDesChangementsAux; //-------->>>>>>>>>>>boucler avec set
	
	
	 toutesLesVariablesAux.add(variablesAux);
  }
  
  toutesLesVariables=toutesLesVariablesAux;
   
  
            for(int r2=0;r2<toutesLesVariables.size();r2++)
            {
                for(int r1=0;r1<toutesLesVariables.get(r2).listeDesVariables.size();r1++)
                {
                    System.out.println(toutesLesVariables.get(r2).listeDesVariables.get(r1));
                    System.out.println("zzzzzzzzzzzzzzzzzz");
                }
            }
            for(int r2=0;r2<toutesLesVariables.size();r2++)
            {
                for(int r1=0;r1<toutesLesVariables.get(r2).listeDesChangements.size();r1++)
                {
                    System.out.println(toutesLesVariables.get(r2).listeDesChangements.get(r1));
                    System.out.println("zzzzzzzzzzzzzzzzzz");
                }
            }
            try {
                Scanner scanner3 = new Scanner(new File(jtf_path2.getText()));
                
                int nI =0;
                String precedent="";
                while (scanner3.hasNextLine()) {
                    S =(String) scanner3.nextLine();
                    String sonTexte=S;
                    String tmp;
                    String z="";
                    String h1="StringValue";
                    

                    
                    for(int u=0;u<toutesLesVariables.size();u++)
                    {   for(int r1=0;r1<toutesLesVariables.get(u).listeDesVariables.size();r1++)
                    {
                        
                        for(int p=0;p<toutesLesVariables.get(u).listeDesChangements.size();p++)
                        {

                            for (int k1=0;k1<(sonTexte.length());k1++)
                            {
                                for(int i=0;i<sonTexte.length();i++)
                                {
                                    try
                                    { tmp = sonTexte.substring(k1,k1+i); }
                                    catch(Exception e)
                                    { break; }
                                    
                                    String jj=toutesLesVariables.get(u).listeDesVariables.get(r1)+toutesLesVariables.get(u).listeDesChangements.get(p);
                                    if ( tmp.equalsIgnoreCase(jj) )
                                    { String n=toutesLesVariables.get(u).listeDesVariables.get(r1);
                                    
                                    sonTexte= sonTexte.substring(0,k1+n.length())+sonTexte.substring(k1+n.length()+toutesLesVariables.get(u).listeDesChangements.get(p).length(),sonTexte.length());
                                    
                                    }
                                    
                                }
                                
                            }
                        }
                    }
                    
                   
                    }
                    S=sonTexte;
                    for(int yy=0;yy<ancienImport.size();yy++)
                    {  String s1=sonTexte.trim();
                       String s2=ancienImport.get(yy).trim();
                        if(s1.equalsIgnoreCase(s2)){sonTexte=nouveauImport.get(yy);}
                    }
                    /*
                  for(int aaa=0;aaa<anciennesValeurs.size();aaa++)
                  {
                    if ( sonTexte.equalsIgnoreCase("[\\w]*"+" "+"[\\w]*"+"Quantity"+"9"+";")){sonTexte="";}
                    String p="import com.palmyra";
                    int longP=p.length();
                    
                    for (int k1=0;k1<(sonTexte.length());k1++)
                    {
                        try
                        { tmp = sonTexte.substring(k1,k1+longP); }
                        catch(Exception e)
                        { break; }
                        
                        if( tmp.trim().endsWith(anciennesValeurs.get(aaa)+";"))
                        {
                            sonTexte="";
                        }
                        }
                  } */
                    for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        //S=replace(sonTexte,txtFind,txtReplace);
                        //System.out.println(S);
                        
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        {
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            if ( tmp.equalsIgnoreCase(txtFind+"[0-9]") )
                            {
                                sonTexte= sonTexte.substring(0,k) + txtReplace + sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                            }
                            
                        }
                        
                    }
                    
                    
                    
                    
                    
                    for(int u=0;u<toutesLesVariables.size();u++)
                    {
                        for(int p1=0;p1<toutesLesVariables.get(u).listeDesChangements.size();p1++)
                        {
                            
                            for(int r1=0;r1<toutesLesVariables.get(u).listeDesVariables.size();r1++)
                            {
                                int k=sonTexte.indexOf(".");
                                int q=sonTexte.indexOf(".toString()");
                                String str="toString()";
                                int r11=toutesLesVariables.get(u).listeDesChangements.get(p1).length();
                                int r12=str.length();
                                int v=sonTexte.indexOf(toutesLesVariables.get(u).listeDesChangements.get(p1));
                                int w=toutesLesVariables.get(u).listeDesChangements.get(p1).length();
                                if((precedent.endsWith(toutesLesVariables.get(u).listeDesVariables.get(r1)))&&(v==k)&&(k!=-1)&&(sonTexte.trim().indexOf('.')==0 )){sonTexte=sonTexte.substring(k+w);}
                                
                            }
                        }
                    }
                    for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        {
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            String a="[\\s]*"+txtFind+"[\\s]*";
                           // if ((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp))!='[a-zA-Z]'))
                        //   &&(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)).trim()=="")&&(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1).trim()==""))
                        {  if (((tmp.matches(a))&&(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)).trim().length()==0))&&(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1).trim().length()==0))
                            { System.out.println(tmp);
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)));
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1));
                                sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                                
                            }
                           else{ if((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp)-1)=='(')&&(sonTexte.charAt(sonTexte.indexOf(tmp)+tmp.length())==')'))
                            {
                                 sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                            }
                        
                          else {
                               if((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp)-1)=='(')&&(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1).trim().length()==0))
                               {
                                     sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                               }
                           }
                           }
                     /*  if((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp)-1)==' ')&&(sonTexte.charAt(sonTexte.indexOf(tmp)+tmp.length()+1))==' ')
                       {
                            sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                       }  */
                        }
                        }
                        
                    }
                 for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        { 
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            String a=txtFind;
                            if((tmp.equalsIgnoreCase(a.trim()))&&(sonTexte.substring(0,k-1).trim().contains(a.trim())))
                                    {
                                        String sonTexte1=sonTexte.substring(k-2,sonTexte.length());
                                        for (int fff=0;fff<(sonTexte1.length()-lgFind);fff++)
                        {  String tmp1;
                            try
                            { tmp1 = sonTexte1.substring(fff,fff+lgFind); }
                            catch(Exception e)
                            { break; }
                            if (((tmp1.matches(a))&&(sonTexte1.substring(sonTexte1.indexOf(tmp1)-1,sonTexte1.indexOf(tmp1)).trim().length()==0))&&(sonTexte1.substring(sonTexte1.indexOf(tmp1)+tmp1.length(),sonTexte1.indexOf(tmp1)+tmp1.length()+1).trim().length()==0))
                            {   //System.out.println(tmp);
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)));
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1));
                                sonTexte1= sonTexte1.substring(0,fff)+txtReplace+sonTexte1.substring(fff+lgFind,sonTexte1.length());
                                fff=fff+lgReplace;
                               // System.out.println(sonTexte);
                              }   
                        }
                                        
                         sonTexte=sonTexte.substring(0,k-2)+sonTexte1;
                                                }
                           
                        }
                    }   
                    
                    S=sonTexte;
                    
                   
                    precedent=sonTexte;
                    
                    
                   S=sonTexte;
                    
                    
                    
                    
                    System.out.println(S+"\t");
                    
                    fw.write(S+"\r\n");
                    
                    alertArea.setText("       End of process");
                    
                    
                }
                
               
                
                scanner3.close();
                fw.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            
         
    }
        }
        else if((new File(jtf_path2.getText()).isDirectory())&&(new File(jtf_path3.getText()).isDirectory())){
                                                    
        // TODO add your handling code here:
         ArrayList<File> listeDesFichiers=new ArrayList<File>();
        
        //     File[] listeDesFichiers=new File[100];
        //    listeDesFichiers=dossierSource.getSelectedFile().listFiles().clone();
        //  listeDesFichiers=dossierSource.getSelectedFile().l
        // listeDesFichiers.
        System.out.println("hcen");
        listeDesFichiers.addAll(Arrays.asList(new File(jtf_path2.getText()).listFiles())); //  System.out.println(dossierSource.getSelectedFile().listFiles().length);
 
       for(int indiceFichier=0;indiceFichier<listeDesFichiers.size();indiceFichier++)
       {
            ArrayList<valeursChangees> liste=new ArrayList<valeursChangees>();
                                               
            
           /* for (int i = 0; i < jTextArea1.getLineCount(); i++) {
                try {
                    int lineStartOffset = jTextArea1.getLineStartOffset(i);
                    String line = jTextArea1.getText(lineStartOffset,
                            jTextArea1.getLineEndOffset(i) - lineStartOffset);
                    System.out.print(line);
            String S=line;
            valeursChangees v1=new valeursChangees();
            v1.valeurAncienne=S.substring(0,S.indexOf('-'));
            v1.valeurNouvelle=S.substring(S.indexOf('-')+1,S.length());
            liste.add(v1);
                } catch (BadLocationException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            }   */
            Scanner scanner8 = null;
        try {
            scanner8 = new Scanner(new File(jtf_path.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Scanner scanner4 = null;
        try {
            scanner4 = new Scanner(new File(jtf_path1.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         Scanner scanner5 = null;
        try {
            scanner5 = new Scanner(new File(New_import.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Scanner scanner10 = null;
        try {
            scanner10 = new Scanner(new File(Old_import.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            while(scanner8.hasNextLine())
            {  String S=scanner8.nextLine();
            if(!S.trim().contains("-")){if (S.trim().length()!=0) {
               
                alertArea.setText("you have not put a separator - in this line of the configuration :"+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
            valeursChangees v1=new valeursChangees();
            v1.valeurAncienne=S.substring(0,S.indexOf('-'));
            v1.valeurNouvelle=S.substring(S.indexOf('-')+1,S.length());
            liste.add(v1);
            }
           /* for(int y=0;y<liste.size();y++)
            {
                System.out.println(liste.get(y).valeurAncienne+"\n");
                System.out.println(liste.get(y).valeurNouvelle+"\n");
            }   */
            // Field[] fields = test1.class.getClass().getDeclaredFields();
            // System.out.println(fields);
            
            // Nous déclarons nos objets en dehors du bloc try/catch
            FileInputStream fis = null;
            FileOutputStream fos = null;
            FileWriter fw = null;
        try {
            String path;
            String path1;
         /*   path = dossierResultat.getSelectedFile().getPath();
          path1=listeDesFichiers.get(indiceFichier).toString();
            path=path+path1;  */
        path = jtf_path3.getText();
        path1=listeDesFichiers.get(indiceFichier).getName();
        path=path+"\\"+path1; 
            fw = new FileWriter(path);
            
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
            
            ArrayList<String> nouveauImport=new ArrayList<String>();
            ArrayList<String> ancienImport=new ArrayList<String>();
            ArrayList<Changement> listeChangements=new ArrayList<Changement>();
            Changement c1=new Changement();
            c1.Type="String";
            ArrayList<String> l1=new ArrayList<String>();
            
            
            //ajout de changements (String)
            
            
            l1.add(".toString()");
            //
            c1.changementsSurType=l1;
            listeChangements.add(c1);
            //
            Changement c2=new Changement();
            c2.Type="Double";
            ArrayList<String> l2=new ArrayList<String>();
            
            
            //ajout de changements (Double)
            
            
            l2.add(".doubleValue()");
            //
            c2.changementsSurType=l2;
            listeChangements.add(c2);
            //
            Changement c3=new Changement();
            c3.Type="String";
            ArrayList<String> l3=new ArrayList<String>();
            
            
            //ajout de changements (Quantity)
            
            
            l3.add(".getParent()");
            //
            c3.changementsSurType=l3;
            listeChangements.add(c3);
            //
            
            
            
            
            
            /*
            liste.add(v1);
            liste.add(v2);
            liste.add(v3);
            liste.add(v4);
            liste.add(v5);
            liste.add(v6);
            liste.add(v7);
            liste.add(v8);
            liste.add(v9);
            liste.add(v10);
            liste.add(v11);
            liste.add(v12);
            liste.add(v13);
            */
            
            
            
            
            boolean t=true;
            
            
            String S="" ;
            ArrayList<Variables> toutesLesVariables=new ArrayList<Variables>();
            
            ArrayList<String> anciennesValeurs=new ArrayList<String>();
            ArrayList<String> NouveauImport=new ArrayList<String>();
            try {
                Scanner scanner = new Scanner(listeDesFichiers.get(indiceFichier));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
          
       
           
           
            while (scanner5.hasNextLine())
            {
                S =(String) scanner5.nextLine();
                nouveauImport.add(S);
            }
            while (scanner10.hasNextLine())
            {
                S =(String) scanner10.nextLine();
                ancienImport.add(S);
            }
            
 /*
  for(int aa=0;aa<nouveauImport.size();aa++)
   {
          try {
              fw.write(nouveauImport.get(aa)+"\r\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
   } 
            */
       
            
            
            /*  while (scanner2.hasNextLine()) {
            S =(String) scanner2.nextLine();
            anciennesValeurs.add(S);
            }  */
            for(int u=0;u<liste.size();u++)
            {
                anciennesValeurs.add(liste.get(u).valeurAncienne.trim());
                
            }
            for(int y=0;y<anciennesValeurs.size();y++)
            {
             //   System.out.println(anciennesValeurs.get(y));
                System.out.println(liste.get(y).valeurNouvelle);
            }
            for(int j=0;j<anciennesValeurs.size();j++)
            {
                Variables a=new Variables();
                ArrayList<String> declarations =new ArrayList<String>();
                String h1=anciennesValeurs.get(j);
                a.Type=h1;
                Scanner scanner1 = null;
                try {
                    scanner1 = new Scanner(listeDesFichiers.get(indiceFichier));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                while (scanner1.hasNextLine()) {
                    S =(String) scanner1.nextLine();
                    String sonTexte=S;
                   String tmp;
                    String z="";
                   // System.out.println(S);
                    
                    
                    
                    for (int k1=0;k1<(sonTexte.length());k1++)
                    { 
                        for(int i=0;i<sonTexte.length();i++)
                        {
                            try
                            { tmp = sonTexte.substring(k1,k1+i);/*fw1.write(tmp+"\r\n");*/ }
                            catch(Exception e)
                            { break; }
                            if ( (tmp.matches(h1+" "+"[\\w]*"+" ")) )
                            { String z1=tmp.substring(h1.length()+1);
                            System.out.println(z1);
                            declarations.add(z1);
                            }
                            if ( tmp.matches(h1+" "+"[\\w]*"+"[,;()]") )
                            {
                                String z2=tmp.substring(h1.length()+1, tmp.length()-1);
                                
                                declarations.add(z2);
                            }
                            
                        }
                    }
                    
                    
                    a.listeDesVariables=declarations;
                 //  System.out.println(a.listeDesVariables.get(0));
                }
                
         toutesLesVariables.add(a);
                
                
            }
            for(int pp=0;pp<toutesLesVariables.size();pp++)
            {
                for(int ppp=0;ppp<toutesLesVariables.get(pp).listeDesVariables.size();ppp++)
                {
                    System.out.println(toutesLesVariables.get(pp).listeDesVariables.get(ppp));
                }
            }
            
            
            int o=-1;
            
            char t1='|';
            int r=0;
            
            ArrayList<String> f1 =new ArrayList<String>();
            
            int k2=-1;
            
            ArrayList<Variables> toutesLesVariablesAux=new ArrayList<Variables>();
  while(scanner4.hasNextLine())
  {   
	
	  Variables variablesAux=new Variables();

	  S=(String) scanner4.nextLine();

	  
	  ArrayList<String> listeDesChangementsAux =new ArrayList<String>();
	  for(int i=0;i<S.length();i++)
	  { 
		  
		 
		  
		 // int y=0;
		for(int j=i;j<S.length();j++)
		{   
			if(S.charAt(j)=='|'){String s="";s=S.substring(i,j);i=j+1;listeDesChangementsAux.add(s);}
			
		}
                if(!S.trim().contains("|")){if (S.trim().length()!=0) {
               
                alertArea.setText("you have not put a separator | in this line of the configuration :"+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
                if(!S.trim().endsWith("|")){if (S.trim().length()!=0) {
               
                alertArea.setText("Every line of configuration file should ends with | "+"    "+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
		
		 
	//	toutesLesVariables.get(k2).listeDesChangements.add(s);
	  }
	 // System.out.println(listeDesChangementsAux.get(0));
	  variablesAux.listeDesChangements=listeDesChangementsAux;
	// 
	  k2=k2+1;
	  variablesAux.Type=toutesLesVariables.get(k2).Type;
	  variablesAux.listeDesVariables=toutesLesVariables.get(k2).listeDesVariables;

	 variablesAux.listeDesChangements=listeDesChangementsAux; //-------->>>>>>>>>>>boucler avec set
	
	
	 toutesLesVariablesAux.add(variablesAux);
  }
  
  toutesLesVariables=toutesLesVariablesAux;
   
  
            for(int r2=0;r2<toutesLesVariables.size();r2++)
            {
                for(int r1=0;r1<toutesLesVariables.get(r2).listeDesVariables.size();r1++)
                {
                    System.out.println(toutesLesVariables.get(r2).listeDesVariables.get(r1));
                    System.out.println("zzzzzzzzzzzzzzzzzz");
                }
            }
            for(int r2=0;r2<toutesLesVariables.size();r2++)
            {
                for(int r1=0;r1<toutesLesVariables.get(r2).listeDesChangements.size();r1++)
                {
                    System.out.println(toutesLesVariables.get(r2).listeDesChangements.get(r1));
                    System.out.println("zzzzzzzzzzzzzzzzzz");
                }
            }
            try {
                Scanner scanner3 = new Scanner(listeDesFichiers.get(indiceFichier));
                
                int nI =0;
                String precedent="";
                while (scanner3.hasNextLine()) {
                    S =(String) scanner3.nextLine();
                    String sonTexte=S;
                    String tmp;
                    String z="";
                    String h1="StringValue";
                    

                    
                    for(int u=0;u<toutesLesVariables.size();u++)
                    {   for(int r1=0;r1<toutesLesVariables.get(u).listeDesVariables.size();r1++)
                    {
                        
                        for(int p=0;p<toutesLesVariables.get(u).listeDesChangements.size();p++)
                        {

                            for (int k1=0;k1<(sonTexte.length());k1++)
                            {
                                for(int i=0;i<sonTexte.length();i++)
                                {
                                    try
                                    { tmp = sonTexte.substring(k1,k1+i); }
                                    catch(Exception e)
                                    { break; }
                                    
                                    String jj=toutesLesVariables.get(u).listeDesVariables.get(r1)+toutesLesVariables.get(u).listeDesChangements.get(p);
                                    if ( tmp.equalsIgnoreCase(jj) )
                                    { String n=toutesLesVariables.get(u).listeDesVariables.get(r1);
                                    
                                    sonTexte= sonTexte.substring(0,k1+n.length())+sonTexte.substring(k1+n.length()+toutesLesVariables.get(u).listeDesChangements.get(p).length(),sonTexte.length());
                                    
                                    }
                                    
                                }
                                
                            }
                        }
                    }
                    
                   
                    }
                    S=sonTexte;
                    for(int yy=0;yy<ancienImport.size();yy++)
                    {  String s1=sonTexte.trim();
                       String s2=ancienImport.get(yy).trim();
                        if(s1.equalsIgnoreCase(s2)){sonTexte=nouveauImport.get(yy);}
                    }
                    /*
                  for(int aaa=0;aaa<anciennesValeurs.size();aaa++)
                  {
                    if ( sonTexte.equalsIgnoreCase("[\\w]*"+" "+"[\\w]*"+"Quantity"+"9"+";")){sonTexte="";}
                    String p="import com.palmyra";
                    int longP=p.length();
                    
                    for (int k1=0;k1<(sonTexte.length());k1++)
                    {
                        try
                        { tmp = sonTexte.substring(k1,k1+longP); }
                        catch(Exception e)
                        { break; }
                        
                        if( tmp.trim().endsWith(anciennesValeurs.get(aaa)+";"))
                        {
                            sonTexte="";
                        }
                        }
                  } */
                    for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        //S=replace(sonTexte,txtFind,txtReplace);
                        //System.out.println(S);
                        
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        {
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            if ( tmp.equalsIgnoreCase(txtFind+"[0-9]") )
                            {
                                sonTexte= sonTexte.substring(0,k) + txtReplace + sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                            }
                            
                        }
                        
                    }
                    
                    
                    
                    
                    
                    for(int u=0;u<toutesLesVariables.size();u++)
                    {
                        for(int p1=0;p1<toutesLesVariables.get(u).listeDesChangements.size();p1++)
                        {
                            
                            for(int r1=0;r1<toutesLesVariables.get(u).listeDesVariables.size();r1++)
                            {
                                int k=sonTexte.indexOf(".");
                                int q=sonTexte.indexOf(".toString()");
                                String str="toString()";
                                int r11=toutesLesVariables.get(u).listeDesChangements.get(p1).length();
                                int r12=str.length();
                                int v=sonTexte.indexOf(toutesLesVariables.get(u).listeDesChangements.get(p1));
                                int w=toutesLesVariables.get(u).listeDesChangements.get(p1).length();
                                if((precedent.endsWith(toutesLesVariables.get(u).listeDesVariables.get(r1)))&&(v==k)&&(k!=-1)&&(sonTexte.trim().indexOf('.')==0 )){sonTexte=sonTexte.substring(k+w);}
                                
                            }
                        }
                    }
                    for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        {
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            String a="[\\s]*"+txtFind+"[\\s]*";
                             if (((tmp.matches(a))&&(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)).trim().length()==0))&&(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1).trim().length()==0))
                            {
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)));
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1));
                                sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                                
                            }
                           else{ if((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp)-1)=='(')&&(sonTexte.charAt(sonTexte.indexOf(tmp)+tmp.length())==')'))
                            {
                                 sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                            }
                           else {
                               if((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp)-1)=='(')&&(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1).trim().length()==0))
                               {
                                     sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                               }
                           }
                           }
                        
                            
                        }
                        
                    }
                    for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        { 
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            String a=txtFind;
                            if((tmp.equalsIgnoreCase(a.trim()))&&(sonTexte.substring(0,k-1).trim().contains(a.trim())))
                                    {
                                        String sonTexte1=sonTexte.substring(k-2,sonTexte.length());
                                        for (int fff=0;fff<(sonTexte1.length()-lgFind);fff++)
                        {  String tmp1;
                            try
                            { tmp1 = sonTexte1.substring(fff,fff+lgFind); }
                            catch(Exception e)
                            { break; }
                            if (((tmp1.matches(a))&&(sonTexte1.substring(sonTexte1.indexOf(tmp1)-1,sonTexte1.indexOf(tmp1)).trim().length()==0))&&(sonTexte1.substring(sonTexte1.indexOf(tmp1)+tmp1.length(),sonTexte1.indexOf(tmp1)+tmp1.length()+1).trim().length()==0))
                            {   //System.out.println(tmp);
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)));
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1));
                                sonTexte1= sonTexte1.substring(0,fff)+txtReplace+sonTexte1.substring(fff+lgFind,sonTexte1.length());
                                fff=fff+lgReplace;
                               // System.out.println(sonTexte);
                              }   
                        }
                                        
                         sonTexte=sonTexte.substring(0,k-2)+sonTexte1;
                                                }
                           
                        }
                    } 
                    precedent=sonTexte;
                    
                    
                    S=sonTexte;
                    
                    
                    fw.write(S+"\r\n");
                    
                    System.out.println(S+"\t");
                    
                    
                    
                    
                    
                    
                }
                
                
                
                scanner3.close();
                fw.close();
                alertArea.setText("       End of process");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            
           
    }                                        
    
       }
        } 
        else if((new File(jtf_path3.getText()).isDirectory())&&(jtf_path2.getText().endsWith(".jar")))
        {
               File jarresultat=null;
        String path3;
        path3=jtf_path3.getText().substring(0,jtf_path3.getText().lastIndexOf("\\"))+File.separator;
      // File sss=new File(jarresultat);
      // jarresultat=new File(modificationSurJar.resultatjar.getSelectedFile());
        JarFile jarfile = null;
        try {
             
            jarfile = new JarFile(jtf_path2.getText());
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String jarName = jarfile.getName();
            String jarFolder = jarName.substring(0, jarName.lastIndexOf(File.separator));
             Enumeration enumeration1 = jarfile.entries();
              String elementName = enumeration1.nextElement().toString();
        while(enumeration1.hasMoreElements())
        {
           elementName = enumeration1.nextElement().toString();
 
                // while the current is a directory, create the directory and go to the next element
                
                // new File(path3+elementName).mkdirs();
                if(jarfile.getEntry(elementName).isDirectory()) {
       //  new File(jarFolder + File.separator + elementName).mkdirs();
     //  new File(elementName);
      //  conversion(new File(path3+elementName));
    //  System.out.println(jarfile.getEntry(elementName).getName());
    String hhhhh=(jtf_path3.getText()+"\\"+jarfile.getEntry(elementName).getName());
    System.out.println(hhhhh);
   hhhhh=hhhhh.replace('/','\\');
    hhhhh=hhhhh.substring(0,hhhhh.lastIndexOf("\\"));
    System.out.println(hhhhh);
   // hhhhh=hhhhh.substring(0,hhhhh.lastIndexOf("\\"));
    System.out.println(hhhhh);
      new File(hhhhh).mkdirs();
                    elementName = enumeration1.nextElement().toString();
                }
        }
        Enumeration enumeration = jarfile.entries();
       
        while(enumeration.hasMoreElements())
        {
            elementName = enumeration.nextElement().toString();
 
                // while the current is a directory, create the directory and go to the next element
              //  new File(jarFolder + File.separator + elementName).mkdirs();
              //   new File(jarFolder + File.separator + elementName).mkdirs();
   //    new File(path3+elementName).mkdirs();
       //         if(jarfile.getEntry(elementName).isDirectory()) {
        
  //     conversion(new File(jarFolder + File.separator + elementName));
         //           elementName = enumeration.nextElement().toString();
         //       }
        
                if(!jarfile.getEntry(elementName).isDirectory()){  System.out.print("if2222222222222222222");
                    ArrayList<valeursChangees> liste=new ArrayList<valeursChangees>();
                                               
            
          
            Scanner scanner11 = null;
        try {
            scanner11 = new Scanner(new File(jtf_path.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Scanner scanner12 = null;
        try {
            scanner12 = new Scanner(new File(jtf_path1.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         Scanner scanner5 = null;
        try {
            scanner5 = new Scanner(new File(New_import.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Scanner scanner10 = null;
        try {
            scanner10 = new Scanner(new File(Old_import.getText()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
          
            
            while(scanner11.hasNextLine())
            {  String S=scanner11.nextLine();
           /* if(!S.trim().contains("-")){if (S.trim().length()!=0) {
               
                jOptionPane1.setMessage("pas de separateur '-' entre les types ");
             //   jPopupMenu1.setVisible(true);
                    }  
}*/
           if(!S.trim().contains("-")){if (S.trim().length()!=0) {
               
                alertArea.setText("you have not put a separator - in this line of the configuration :"+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
            valeursChangees v1=new valeursChangees();
            v1.valeurAncienne=S.substring(0,S.indexOf('-'));
            v1.valeurNouvelle=S.substring(S.indexOf('-')+1,S.length());
            liste.add(v1);
            }
           /* for(int y=0;y<liste.size();y++)
            {
                System.out.println(liste.get(y).valeurAncienne+"\n");
                System.out.println(liste.get(y).valeurNouvelle+"\n");
            }   */
            // Field[] fields = test1.class.getClass().getDeclaredFields();
            // System.out.println(fields);
            
            // Nous déclarons nos objets en dehors du bloc try/catch
            FileInputStream fis = null;
            FileOutputStream fos = null;
            FileWriter fw = null;
        try {
            
        
                     path3=jtf_path3.getText().substring(0,jtf_path3.getText().lastIndexOf("\\"))+"\\";
            String ttt=jtf_path3.getText()+"\\"+jarfile.getEntry(elementName).getName();
            System.out.println(ttt);
            ttt=ttt.replace('/','\\');
            System.out.println(ttt);
          //  ttt=ttt.substring(0,ttt.length()-1);
          String tt=ttt.substring(0,ttt.lastIndexOf('\\'));
                  new File(tt).mkdirs();
            System.out.println(ttt);
            fw = new FileWriter(ttt);
            
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
            
            ArrayList<String> nouveauImport=new ArrayList<String>();
            ArrayList<String> ancienImport=new ArrayList<String>();
            ArrayList<Changement> listeChangements=new ArrayList<Changement>();
            Changement c1=new Changement();
            c1.Type="String";
            ArrayList<String> l1=new ArrayList<String>();
            
            
            //ajout de changements (String)
            
            
            l1.add(".toString()");
            //
            c1.changementsSurType=l1;
            listeChangements.add(c1);
            //
            Changement c2=new Changement();
            c2.Type="Double";
            ArrayList<String> l2=new ArrayList<String>();
            
            
            //ajout de changements (Double)
            
            
            l2.add(".doubleValue()");
            //
            c2.changementsSurType=l2;
            listeChangements.add(c2);
            //
            Changement c3=new Changement();
            c3.Type="String";
            ArrayList<String> l3=new ArrayList<String>();
            
            
            //ajout de changements (Quantity)
            
            
            l3.add(".getParent()");
            //
            c3.changementsSurType=l3;
            listeChangements.add(c3);
            //
            
            
            
            
            
            /*
            liste.add(v1);
            liste.add(v2);
            liste.add(v3);
            liste.add(v4);
            liste.add(v5);
            liste.add(v6);
            liste.add(v7);
            liste.add(v8);
            liste.add(v9);
            liste.add(v10);
            liste.add(v11);
            liste.add(v12);
            liste.add(v13);
            */
            
            
            
            
            boolean t=true;
            
            
            String S="" ;
            ArrayList<Variables> toutesLesVariables=new ArrayList<Variables>();
            
            ArrayList<String> anciennesValeurs=new ArrayList<String>();
            ArrayList<String> NouveauImport=new ArrayList<String>();
            Scanner scanner = new Scanner(jarFolder + "\\" + elementName); 
            
          
       
           
           
            while (scanner5.hasNextLine())
            {
                S =(String) scanner5.nextLine();
                nouveauImport.add(S);
            }
            while (scanner10.hasNextLine())
            {
                S =(String) scanner10.nextLine();
                ancienImport.add(S);
            }
            
 /*
  for(int aa=0;aa<nouveauImport.size();aa++)
   {
          try {
              fw.write(nouveauImport.get(aa)+"\r\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame2.class.getName()).log(Level.SEVERE, null, ex);
          }
   } 
            */
       
            
            
            /*  while (scanner2.hasNextLine()) {
            S =(String) scanner2.nextLine();
            anciennesValeurs.add(S);
            }  */
            for(int u=0;u<liste.size();u++)
            {
                anciennesValeurs.add(liste.get(u).valeurAncienne.trim());
                
            }
            for(int y=0;y<anciennesValeurs.size();y++)
            {
             //   System.out.println(anciennesValeurs.get(y));
                System.out.println(liste.get(y).valeurNouvelle);
            }
            for(int j=0;j<anciennesValeurs.size();j++)
            {
                Variables a=new Variables();
                ArrayList<String> declarations =new ArrayList<String>();
                String h1=anciennesValeurs.get(j);
                a.Type=h1;
                Scanner scanner15 = null;
               // File file9= new File(jarFolder+File.separator+elementName);
                    try {
                        scanner15 = new Scanner(new File(jarFolder+File.separator+elementName));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
               
                 while (scanner15.hasNextLine()) {
                     System.out.println("testentree");
                    S =(String) scanner15.nextLine();
                    String sonTexte=S;
                   String tmp;
                    String z="";
                   // System.out.println(S);
                    
                    
                    
                    for (int k1=0;k1<(sonTexte.length());k1++)
                    { 
                        for(int i=0;i<sonTexte.length();i++)
                        {
                            try
                            { tmp = sonTexte.substring(k1,k1+i);/*fw1.write(tmp+"\r\n");*/ }
                            catch(Exception e)
                            { break; }
                            if ( (tmp.matches(h1+" "+"[\\w]*"+" ")) )
                            { String z1=tmp.substring(h1.length()+1);
                            System.out.println(z1);
                            declarations.add(z1);
                            }
                            if ( tmp.matches(h1+" "+"[\\w]*"+"[,;()]") )
                            {
                                String z2=tmp.substring(h1.length()+1, tmp.length()-1);
                                
                                declarations.add(z2);
                            }
                            
                        }
                    }
                    
                    
                    a.listeDesVariables=declarations;
                 //  System.out.println(a.listeDesVariables.get(0));
                }
                
         toutesLesVariables.add(a);
                
                
            }
             Scanner scanner16 = null;
               // File file9= new File(jarFolder+File.separator+elementName);
                    try {
                        scanner16 = new Scanner(new File(jarFolder+File.separator+elementName));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
            for(int pp=0;pp<toutesLesVariables.size();pp++)
            {
                for(int ppp=0;ppp<toutesLesVariables.get(pp).listeDesVariables.size();ppp++)
                {
                    System.out.println(toutesLesVariables.get(pp).listeDesVariables.get(ppp));
                }
            }
            
            
            int o=-1;
            
            char t1='|';
            int r=0;
            
            ArrayList<String> f1 =new ArrayList<String>();
            
            int k2=-1;
            
            ArrayList<Variables> toutesLesVariablesAux=new ArrayList<Variables>();
  while(scanner12.hasNextLine())
  {   
	
	  Variables variablesAux=new Variables();

	  S=(String) scanner12.nextLine();

	  
	  ArrayList<String> listeDesChangementsAux =new ArrayList<String>();
	  for(int i=0;i<S.length();i++)
	  { 
		  
		 
		  
		 // int y=0;
		for(int j=i;j<S.length();j++)
		{   
			if(S.charAt(j)=='|'){String s="";s=S.substring(i,j);i=j+1;listeDesChangementsAux.add(s);}
			
		}
		if(!S.trim().contains("|")){if (S.trim().length()!=0) {
               
                alertArea.setText("you have not put a separator | in this line of the configuration :"+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
                if(!S.trim().endsWith("|")){if (S.trim().length()!=0) {
               
                alertArea.setText("Every line of configuration file should ends with | "+"    "+S);
             //   jPopupMenu1.setVisible(true);
                    }
}
		 
	//	toutesLesVariables.get(k2).listeDesChangements.add(s);
	  }
	 // System.out.println(listeDesChangementsAux.get(0));
	  variablesAux.listeDesChangements=listeDesChangementsAux;
	// 
	  k2=k2+1;
	  variablesAux.Type=toutesLesVariables.get(k2).Type;
	  variablesAux.listeDesVariables=toutesLesVariables.get(k2).listeDesVariables;

	 variablesAux.listeDesChangements=listeDesChangementsAux; //-------->>>>>>>>>>>boucler avec set
	
	
	 toutesLesVariablesAux.add(variablesAux);
  }
  
  toutesLesVariables=toutesLesVariablesAux;
   
  
            for(int r2=0;r2<toutesLesVariables.size();r2++)
            {
                for(int r1=0;r1<toutesLesVariables.get(r2).listeDesVariables.size();r1++)
                {
                    System.out.println(toutesLesVariables.get(r2).listeDesVariables.get(r1));
                    System.out.println("zzzzzzzzzzzzzzzzzz");
                }
            }
            for(int r2=0;r2<toutesLesVariables.size();r2++)
            {
                for(int r1=0;r1<toutesLesVariables.get(r2).listeDesChangements.size();r1++)
                {
                    System.out.println(toutesLesVariables.get(r2).listeDesChangements.get(r1));
                    System.out.println("zzzzzzzzzzzzzzzzzz");
                }
            }
           
              
               //new File(jarFolder + File.separator + elementName).mkdirs(); 
               
                int nI =0;
                String precedent="";
                while (scanner16.hasNextLine()) {
                    try{
                    S =(String) scanner16.nextLine();
                    String sonTexte=S;
                    String tmp;
                    String z="";
                    String h1="StringValue";
                    

                    
                    for(int u=0;u<toutesLesVariables.size();u++)
                    {   for(int r1=0;r1<toutesLesVariables.get(u).listeDesVariables.size();r1++)
                    {
                        
                        for(int p=0;p<toutesLesVariables.get(u).listeDesChangements.size();p++)
                        {

                            for (int k1=0;k1<(sonTexte.length());k1++)
                            {
                                for(int i=0;i<sonTexte.length();i++)
                                {
                                    try
                                    { tmp = sonTexte.substring(k1,k1+i); }
                                    catch(Exception e)
                                    { break; }
                                    
                                    String jj=toutesLesVariables.get(u).listeDesVariables.get(r1)+toutesLesVariables.get(u).listeDesChangements.get(p);
                                    if ( tmp.equalsIgnoreCase(jj) )
                                    { String n=toutesLesVariables.get(u).listeDesVariables.get(r1);
                                    
                                    sonTexte= sonTexte.substring(0,k1+n.length())+sonTexte.substring(k1+n.length()+toutesLesVariables.get(u).listeDesChangements.get(p).length(),sonTexte.length());
                                    
                                    }
                                    
                                }
                                
                            }
                        }
                    }
                    
                   
                    }
                    S=sonTexte;
                    for(int yy=0;yy<ancienImport.size();yy++)
                    {  String s1=sonTexte.trim();
                       String s2=ancienImport.get(yy).trim();
                        if(s1.equalsIgnoreCase(s2)){sonTexte=nouveauImport.get(yy);}
                    }
                    /*
                  for(int aaa=0;aaa<anciennesValeurs.size();aaa++)
                  {
                    if ( sonTexte.equalsIgnoreCase("[\\w]*"+" "+"[\\w]*"+"Quantity"+"9"+";")){sonTexte="";}
                    String p="import com.palmyra";
                    int longP=p.length();
                    
                    for (int k1=0;k1<(sonTexte.length());k1++)
                    {
                        try
                        { tmp = sonTexte.substring(k1,k1+longP); }
                        catch(Exception e)
                        { break; }
                        
                        if( tmp.trim().endsWith(anciennesValeurs.get(aaa)+";"))
                        {
                            sonTexte="";
                        }
                        }
                  } */
                    for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        //S=replace(sonTexte,txtFind,txtReplace);
                        //System.out.println(S);
                        
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        {
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            if ( tmp.equalsIgnoreCase(txtFind+"[0-9]") )
                            {
                                sonTexte= sonTexte.substring(0,k) + txtReplace + sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                            }
                            
                        }
                        
                    }
                    
                    
                    
                    
                    
                    for(int u=0;u<toutesLesVariables.size();u++)
                    {
                        for(int p1=0;p1<toutesLesVariables.get(u).listeDesChangements.size();p1++)
                        {
                            
                            for(int r1=0;r1<toutesLesVariables.get(u).listeDesVariables.size();r1++)
                            {
                                int k=sonTexte.indexOf(".");
                                int q=sonTexte.indexOf(".toString()");
                                String str="toString()";
                                int r11=toutesLesVariables.get(u).listeDesChangements.get(p1).length();
                                int r12=str.length();
                                int v=sonTexte.indexOf(toutesLesVariables.get(u).listeDesChangements.get(p1));
                                int w=toutesLesVariables.get(u).listeDesChangements.get(p1).length();
                                if((precedent.endsWith(toutesLesVariables.get(u).listeDesVariables.get(r1)))&&(v==k)&&(k!=-1)&&(sonTexte.trim().indexOf('.')==0 )){sonTexte=sonTexte.substring(k+w);}
                                
                            }
                        }
                    }
                    for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        {
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            String a="[\\s]*"+txtFind+"[\\s]*";
                            if (((tmp.matches(a))&&(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)).trim().length()==0))&&(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1).trim().length()==0))
                            {
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)));
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1));
                                sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                                
                            }
                           else{ if((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp)-1)=='(')&&(sonTexte.charAt(sonTexte.indexOf(tmp)+tmp.length())==')'))
                            {
                                 sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                                
                            }
                           else {
                               if((tmp.matches(a))&&(sonTexte.charAt(sonTexte.indexOf(tmp)-1)=='(')&&(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1).trim().length()==0))
                               {
                                     sonTexte= sonTexte.substring(0,k)+txtReplace+sonTexte.substring(k+lgFind,sonTexte.length());
                                k=k+lgReplace;
                               }
                           }
                           }
                            
                        }
                        
                    }
                   for (int i = 0; i <liste.size(); i++)
                    {
                        //sonTexte=S;
                        String txtFind = liste.get(i).valeurAncienne;
                        String txtReplace=liste.get(i).valeurNouvelle;
                        
                        String p1=".toString()";
                        int longP1=p1.length();
                        String textNull=" ";
                        
                        int lgFind = txtFind.length();
                        int lgReplace=txtReplace.length();
                        
                        
                        
                        
                        
                        for (int k=0;k<(sonTexte.length()-lgFind);k++)
                        { 
                            try
                            { tmp = sonTexte.substring(k,k+lgFind); }
                            catch(Exception e)
                            { break; }
                            String a=txtFind;
                            if((tmp.equalsIgnoreCase(a.trim()))&&(sonTexte.substring(0,k-1).trim().contains(a.trim())))
                                    {
                                        String sonTexte1=sonTexte.substring(k-2,sonTexte.length());
                                        for (int fff=0;fff<(sonTexte1.length()-lgFind);fff++)
                        {  String tmp1;
                            try
                            { tmp1 = sonTexte1.substring(fff,fff+lgFind); }
                            catch(Exception e)
                            { break; }
                            if (((tmp1.matches(a))&&(sonTexte1.substring(sonTexte1.indexOf(tmp1)-1,sonTexte1.indexOf(tmp1)).trim().length()==0))&&(sonTexte1.substring(sonTexte1.indexOf(tmp1)+tmp1.length(),sonTexte1.indexOf(tmp1)+tmp1.length()+1).trim().length()==0))
                            {   //System.out.println(tmp);
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)-1,sonTexte.indexOf(tmp)));
                               // System.out.print(sonTexte.substring(sonTexte.indexOf(tmp)+tmp.length(),sonTexte.indexOf(tmp)+tmp.length()+1));
                                sonTexte1= sonTexte1.substring(0,fff)+txtReplace+sonTexte1.substring(fff+lgFind,sonTexte1.length());
                                fff=fff+lgReplace;
                               // System.out.println(sonTexte);
                              }   
                        }
                                        
                         sonTexte=sonTexte.substring(0,k-2)+sonTexte1;
                                                }
                           
                        }
                    }  
                    precedent=sonTexte;
                    
                    
                    S=sonTexte;
                    System.out.println(S);
                    
                   
                        fw.write(S+"\r\n");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                    
                    
                    
                    
                    
                    
                }
                
                
                
                scanner.close();
               
            alertArea.setText("       End of process");
                  //  System.out.println("hcenooooo");
                 //  new File(path3+elementName).mkdirs();
                 //   conversion(new File(path3+elementName));
                }  
                
                
                //     System.out.println(jarName);
               // System.out.print(jarFolder);
              // System.out.print(elementName);
              // new File()
                // System.out.print(jarfile.getEntry(elementName).getName());
                
               
            
        } 
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
 
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            Old_import.setText(file.getPath());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
 
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            New_import.setText(file.getPath());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jtf_path3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_path3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_path3ActionPerformed

    private void jtf_path2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_path2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_path2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField New_import;
    private javax.swing.JTextField Old_import;
    private javax.swing.JTextArea alertArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtf_path;
    private javax.swing.JTextField jtf_path1;
    private javax.swing.JTextField jtf_path2;
    private javax.swing.JTextField jtf_path3;
    // End of variables declaration//GEN-END:variables
}
